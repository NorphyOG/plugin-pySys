Metadata-Version: 2.4
Name: mmst
Version: 0.1.0
Summary: Modulares Medien- & System-Toolkit
Author: MMST Team
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: PySide6>=6.7
Requires-Dist: watchdog>=4.0
Requires-Dist: typing-extensions>=4.12
Requires-Dist: send2trash>=1.8
Requires-Dist: mutagen>=1.47
Requires-Dist: numpy>=1.26
Requires-Dist: scipy>=1.11
Requires-Dist: sounddevice>=0.4
Requires-Dist: pymediainfo>=6.0
Provides-Extra: dev
Requires-Dist: pytest>=8.2; extra == "dev"

# MMST Dashboard ‚Äì Modulare Python-Anwendung

## Highlights (Oktober 2025)

- **üéØ Globales Progress-System:** Zentraler Fortschritts-Dialog f√ºr alle Plugins mit Multi-Task-Support
- **üêõ Debug-Console:** Echtzeit-Log-Viewer in Einstellungen mit Filterung und Farbcodierung
- **‚è∞ Scheduled Backups:** Automatische Zeitplanung f√ºr FileManager-Backups (St√ºndlich/T√§glich/W√∂chentlich/Monatlich)
- **üñºÔ∏è Image Compression Tool:** Visueller Vergleich vor/nach Kompression mit Quality-Slider
- **üìä Gallery Performance:** Optimiert f√ºr 10k+ Dateien mit Chunked-Loading & Binary-Search
- **Sitzungspersistenz:** Dashboard merkt sich Fenstergr√∂√üe, aktives Plugin und Filter-Einstellungen
- **MediaLibrary Iteration 5:** Inline-Bewertungen, Custom Presets, Batch-Aktionen, Player-Integration

## Recent Updates (Next Big Update v2)

**7 Major Features Implementiert** ‚Äì Das "Next Big Update" bringt umfangreiche Erweiterungen √ºber alle Plugins:

### üéµ MediaLibrary: Statistik-Dashboard

- **Visual Analytics:** Neue Dashboard-Ansicht mit Statistik-Karten (Dateien, Gr√∂√üe, Bewertungen)
- **Genre- & Artist-Charts:** Horizontale Bar-Charts zeigen Top 10 Verteilungen
- **Temporale Stats:** "Letzte 7 Tage"-Filter f√ºr hinzugef√ºgte Dateien und durchschnittliche Bewertungen
- **Event-Integration:** Reagiert automatisch auf `files.deleted` und `files.converted` Events

### üìÅ FileManager: Intelligente Duplikat-Auswahl, Backup-Profile & Zeitgesteuerte Backups

- **Smart Selection (4 Modi):**
  - *√Ñlteste behalten:* W√§hlt neuere Duplikate zum L√∂schen aus
  - *Kleinste behalten:* Markiert gr√∂√üere Varianten
  - *Nach Ordner filtern:* Zeigt nur Duplikate in bestimmtem Pfad
  - *Alle abw√§hlen:* Reset f√ºr manuelle Nachbearbeitung
- **Backup-Profile:** Speichern & Laden h√§ufig genutzter Backup-Konfigurationen (JSON-basiert)
- **Dry-Run-Modus:** Zeigt exakt, welche Dateien kopiert/gel√∂scht w√ºrden ‚Äì ohne Ausf√ºhrung
- **‚è∞ Scheduled Backups:** Automatische Backups mit QTimer (St√ºndlich/T√§glich/W√∂chentlich/Monatlich)
  - Profile-basierte Zeitplanung mit n√§chstem Laufzeitpunkt
  - Hintergrund-Ausf√ºhrung mit Benachrichtigungen
  - Persistente Konfiguration √ºber App-Neustarts

### üîß SystemTools: Batch-Warteschlange & Conversion-Presets

- **Batch-Queue:** Multi-File-Warteschlange mit sequentieller Verarbeitung
- **Fortschrittsanzeige:** Pro-Datei-Status und Gesamt-Fortschrittsbalken
- **Conversion-Presets:** Speichern h√§ufiger Format-Kombinationen (z. B. "MP4 zu GIF", "WAV zu MP3 192kbit")
- **Event-Emission:** Sendet `files.converted` Events f√ºr MediaLibrary-Integration

### üéöÔ∏è AudioTools: Echtzeit-Spektrum-Analyzer

- **FFT-basierte Visualisierung:** 10-Band-Frequenzanzeige (31 Hz ‚Äì 16 kHz)
- **Color-Coded Bars:** Gr√ºn (niedrig) ‚Üí Gelb (mittel) ‚Üí Rot (Spitzen)
- **Auto-Start/Stop:** Synchronisiert automatisch mit EQ-Engine-Status
- **Graceful Degradation:** Optionale Dependencies (numpy/sounddevice) werden sauber behandelt

### üîå Core: EventBus-System

- **Plugin-Kommunikation:** Pub/Sub-Architektur f√ºr lose gekoppelte Plugin-Interaktion
- **Thread-Safe:** RLock-basierte Synchronisation f√ºr Concurrent Access
- **Error Isolation:** Fehlerhafte Subscriber beeintr√§chtigen andere nicht
- **Events:**
  - `files.deleted` ‚Äì FileManager ‚Üí MediaLibrary (automatisches Index-Update)
  - `files.converted` ‚Äì SystemTools ‚Üí MediaLibrary (Benachrichtigung √ºber neue Dateien)

### üìä Technische Details

- **Neue Dateien:** `src/mmst/core/events.py`, `src/mmst/plugins/media_library/statistics_dashboard.py`, `src/mmst/plugins/audio_tools/spectrum_analyzer.py`
- **Modifizierte Module:** 6 Plugin-Dateien erweitert (MediaLibrary, FileManager, SystemTools, AudioTools)
- **Code-Umfang:** ~1500 neue Zeilen √ºber 3 neue + 6 modifizierte Dateien
- **Tests:** Unit Tests f√ºr EventBus, Backup Dry-Run, und Batch Queue
- **Persistierung:** JSON-basierte Profile/Presets in Plugin-Config-Verzeichnissen

Siehe `NEXT_BIG_UPDATE_SUMMARY.md` f√ºr detaillierte Feature-Beschreibungen und Verwendungsbeispiele.

## Architektur im √úberblickia & System Toolkit (MMST)

MMST ist ein modulares Dashboard, das ein gemeinsames Core-System mit spezialisierten Plugins kombiniert.
Der Core verwaltet Lebenszyklus, Benutzeroberfl√§che und gemeinsame Dienste, w√§hrend Plugins einzelne Werkzeuge
(z.‚ÄØB. Dateiverwaltung oder Audio-Bearbeitung) kapseln.

## Highlights (Oktober 2025)

- **Sitzungspersistenz:** Dashboard merkt sich Fenstergr√∂√üe, aktives Plugin und zuletzt genutzte MediaLibrary-Filter inklusive Tabs & Auswahl.
- **MediaLibrary Iteration‚ÄØ5:** Inline-Bewertungen und Tags, benutzerdefinierte Presets, Stapelaktionen, externe Player pro Dateityp sowie Auswahl-basierte Tag-/Playlist-Aktionen und eine integrierte Playlist-Wiedergabe.
- **Qualit√§tssicherung:** Erweiterte Tests f√ºr UI-Persistenz und Attributspeicherung sichern die neuen Workflows ab.

## Architektur im √úberblick

- **Core-System (Python + PySide6)**
  - L√§dt Plugins dynamisch aus `mmst.plugins.*`.
  - Stellt gemeinsame Dienste wie Logging, Benachrichtigungen und Speicherpfade √ºber `CoreServices` bereit.
  - Visualisiert Plugins im Dashboard (`DashboardWindow`) mit Statusanzeige, Start/Stop und Konfigurationsaufrufen.
- **Plugins**
  - Erben von `BasePlugin` und liefern einen `PluginManifest` mit Metadaten.
  - Implementieren grundlegende Hooks (`initialize`, `start`, `stop`, `create_view`, `configure`, `shutdown`).
  - K√∂nnen eigene Services, Threads oder Abh√§ngigkeiten mitbringen, bleiben aber √ºber die definierte Schnittstelle
    vom Core entkoppelt.

### Aktuell enthaltene Plugins

| Plugin | Beschreibung | Status |
| ------ | ------------- | ------ |
| `FileManagerPlugin` (`mmst.file_manager`) | Duplikat-Scanner mit Hash-Gruppierung, sicherer L√∂schfunktion und dateibasierten Backups mit Fortschrittsanzeige | ‚úÖ MVP |
| `AudioToolsPlugin` (`mmst.audio_tools`) | Echtzeit-10-Band-Equalizer mit scipy DSP, WAV-Recorder mit Metadaten, Preset-Verwaltung | ‚úÖ MVP |
| `MediaLibraryPlugin` (`mmst.media_library`) | SQLite-Bibliothek mit Quellenverwaltung, Inline-Rating & Tags, benutzerdefinierten Presets, Stapelaktionen, externen Playern, Playlist-Wiedergabe sowie persistenten Filtern, Tabs und Selektionen | ‚úÖ Iteration‚ÄØ5 |
| `SystemToolsPlugin` (`mmst.system_tools`) | Dateikonverter f√ºr Audio/Video/Bild mit ffmpeg/ImageMagick-Integration und Tool-Erkennung | ‚úÖ MVP |

Der Duplikat-Scanner nutzt parallele Threads, gruppiert Dateien anhand von SHA-256-Hashes und erlaubt das L√∂schen
einzelner Kopien (standardm√§√üig via Papierkorb). Die Backup-Ansicht kopiert Ordnerb√§ume ohne Kompression, optional
als Spiegelung, und meldet Fortschritt sowie berechnete Statistiken im UI. Zentrale Logik befindet sich in
`mmst.plugins.file_manager.scanner` und `mmst.plugins.file_manager.backup`.

## Projektstruktur

```text
.
‚îú‚îÄ‚îÄ pyproject.toml
‚îú‚îÄ‚îÄ README.md
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îî‚îÄ‚îÄ mmst/
‚îÇ       ‚îú‚îÄ‚îÄ core/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ app.py
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ plugin_base.py
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ plugin_manager.py
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ services.py
‚îÇ       ‚îî‚îÄ‚îÄ plugins/
‚îÇ           ‚îú‚îÄ‚îÄ file_manager/
‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ plugin.py
‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ backup.py
‚îÇ           ‚îÇ   ‚îî‚îÄ‚îÄ scanner.py
‚îÇ           ‚îú‚îÄ‚îÄ media_library/
‚îÇ           ‚îÇ   ‚îú‚îÄ‚îÄ plugin.py
‚îÇ           ‚îÇ   ‚îî‚îÄ‚îÄ core.py
‚îÇ           ‚îî‚îÄ‚îÄ system_tools/
‚îÇ               ‚îú‚îÄ‚îÄ plugin.py
‚îÇ               ‚îú‚îÄ‚îÄ tools.py
‚îÇ               ‚îî‚îÄ‚îÄ converter.py
‚îî‚îÄ‚îÄ tests/
    ‚îú‚îÄ‚îÄ test_audio_device_service.py
    ‚îú‚îÄ‚îÄ test_audio_tools_plugin.py
    ‚îú‚îÄ‚îÄ test_backup.py
    ‚îú‚îÄ‚îÄ test_config_store.py
    ‚îú‚îÄ‚îÄ test_duplicate_scanner.py
    ‚îú‚îÄ‚îÄ test_media_library.py
    ‚îú‚îÄ‚îÄ test_plugin_manager.py
    ‚îî‚îÄ‚îÄ test_system_tools.py
```

## Schnellstart

1. **Abh√§ngigkeiten installieren**

   ```powershell
   python -m pip install -e .[dev]
   ```

  > PySide6 ist erforderlich, um das Dashboard auszuf√ºhren. Die optionale `dev`-Gruppe installiert `pytest`. F√ºr die
  > L√∂schfunktion des Duplikat-Scanners empfiehlt sich zus√§tzlich `send2trash` (wird automatisch mit der `dev`-Gruppe
  > installiert). F√ºr WAV-Metadaten nutzt das AudioTools-Plugin `mutagen`; die Bibliothek wird automatisch mitinstalliert.

1. **Dashboard starten**

   ```powershell
   python -m mmst.core.app
   ```

   Nach dem Start erscheint das FileManager-Plugin in der Seitenleiste. Plugins lassen sich starten/stoppen; im aktiven Zustand
   zeigt der zentrale Bereich das UI des ausgew√§hlten Plugins.

## Tests & Qualit√§tssicherung

- Das Projekt verwendet `pytest`. Die Konfiguration (inkl. `pythonpath`) liegt in `pyproject.toml`.
- Test-Suite ausf√ºhren:

  ```powershell
  python -m pytest
  ```

  Der Plugin-Manager-Test wird automatisch √ºbersprungen, falls PySide6 nicht installiert ist.

## Ausblick

- AudioTools-Plugin ausbauen: Equalizer-DSP, Recording-Pipeline und Plattform-spezifische Backends.
  - N√§chste Schritte: EQ-DSP Pipeline, Echtzeit-Pegelanzeige, Linux-spezifische Loopback-Backends.
- MediaLibrary- und SystemTools-Plugins vorbereiten.
- Plugin-Konfigurationsdialoge implementieren (z.‚ÄØB. Hash-Algorithmus im Duplikat-Scanner).
- Ereignisbus erweitern (z.‚ÄØB. Toast-Benachrichtigungen im UI darstellen).
