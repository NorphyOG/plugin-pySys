Metadata-Version: 2.4
Name: mmst
Version: 0.1.0
Summary: Modulares Medien- & System-Toolkit
Author: MMST Team
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: PySide6>=6.7
Requires-Dist: watchdog>=4.0
Requires-Dist: typing-extensions>=4.12
Requires-Dist: send2trash>=1.8
Requires-Dist: mutagen>=1.47
Requires-Dist: numpy>=1.26
Requires-Dist: scipy>=1.11
Requires-Dist: sounddevice>=0.4
Requires-Dist: pymediainfo>=6.0
Provides-Extra: dev
Requires-Dist: pytest>=8.2; extra == "dev"

# Modular Media & System Toolkit (MMST)

MMST ist ein modulares Dashboard, das ein gemeinsames Core-System mit spezialisierten Plugins kombiniert.
Der Core verwaltet Lebenszyklus, Benutzeroberfläche und gemeinsame Dienste, während Plugins einzelne Werkzeuge
(z. B. Dateiverwaltung oder Audio-Bearbeitung) kapseln.

## Highlights (Oktober 2025)

- **Sitzungspersistenz:** Dashboard merkt sich Fenstergröße, aktives Plugin und zuletzt genutzte MediaLibrary-Filter inklusive Tabs & Auswahl.
- **MediaLibrary Iteration 5:** Inline-Bewertungen und Tags, benutzerdefinierte Presets, Stapelaktionen, externe Player pro Dateityp sowie Auswahl-basierte Tag-/Playlist-Aktionen und eine integrierte Playlist-Wiedergabe.
- **Qualitätssicherung:** Erweiterte Tests für UI-Persistenz und Attributspeicherung sichern die neuen Workflows ab.

## Architektur im Überblick

- **Core-System (Python + PySide6)**
  - Lädt Plugins dynamisch aus `mmst.plugins.*`.
  - Stellt gemeinsame Dienste wie Logging, Benachrichtigungen und Speicherpfade über `CoreServices` bereit.
  - Visualisiert Plugins im Dashboard (`DashboardWindow`) mit Statusanzeige, Start/Stop und Konfigurationsaufrufen.
- **Plugins**
  - Erben von `BasePlugin` und liefern einen `PluginManifest` mit Metadaten.
  - Implementieren grundlegende Hooks (`initialize`, `start`, `stop`, `create_view`, `configure`, `shutdown`).
  - Können eigene Services, Threads oder Abhängigkeiten mitbringen, bleiben aber über die definierte Schnittstelle
    vom Core entkoppelt.

### Aktuell enthaltene Plugins

| Plugin | Beschreibung | Status |
| ------ | ------------- | ------ |
| `FileManagerPlugin` (`mmst.file_manager`) | Duplikat-Scanner mit Hash-Gruppierung, sicherer Löschfunktion und dateibasierten Backups mit Fortschrittsanzeige | ✅ MVP |
| `AudioToolsPlugin` (`mmst.audio_tools`) | Echtzeit-10-Band-Equalizer mit scipy DSP, WAV-Recorder mit Metadaten, Preset-Verwaltung | ✅ MVP |
| `MediaLibraryPlugin` (`mmst.media_library`) | SQLite-Bibliothek mit Quellenverwaltung, Inline-Rating & Tags, benutzerdefinierten Presets, Stapelaktionen, externen Playern, Playlist-Wiedergabe sowie persistenten Filtern, Tabs und Selektionen | ✅ Iteration 5 |
| `SystemToolsPlugin` (`mmst.system_tools`) | Dateikonverter für Audio/Video/Bild mit ffmpeg/ImageMagick-Integration und Tool-Erkennung | ✅ MVP |

Der Duplikat-Scanner nutzt parallele Threads, gruppiert Dateien anhand von SHA-256-Hashes und erlaubt das Löschen
einzelner Kopien (standardmäßig via Papierkorb). Die Backup-Ansicht kopiert Ordnerbäume ohne Kompression, optional
als Spiegelung, und meldet Fortschritt sowie berechnete Statistiken im UI. Zentrale Logik befindet sich in
`mmst.plugins.file_manager.scanner` und `mmst.plugins.file_manager.backup`.

## Projektstruktur

```text
.
├── pyproject.toml
├── README.md
├── src/
│   └── mmst/
│       ├── core/
│       │   ├── app.py
│       │   ├── plugin_base.py
│       │   ├── plugin_manager.py
│       │   └── services.py
│       └── plugins/
│           ├── file_manager/
│           │   ├── plugin.py
│           │   ├── backup.py
│           │   └── scanner.py
│           ├── media_library/
│           │   ├── plugin.py
│           │   └── core.py
│           └── system_tools/
│               ├── plugin.py
│               ├── tools.py
│               └── converter.py
└── tests/
    ├── test_audio_device_service.py
    ├── test_audio_tools_plugin.py
    ├── test_backup.py
    ├── test_config_store.py
    ├── test_duplicate_scanner.py
    ├── test_media_library.py
    ├── test_plugin_manager.py
    └── test_system_tools.py
```

## Schnellstart

1. **Abhängigkeiten installieren**

   ```powershell
   python -m pip install -e .[dev]
   ```

  > PySide6 ist erforderlich, um das Dashboard auszuführen. Die optionale `dev`-Gruppe installiert `pytest`. Für die
  > Löschfunktion des Duplikat-Scanners empfiehlt sich zusätzlich `send2trash` (wird automatisch mit der `dev`-Gruppe
  > installiert). Für WAV-Metadaten nutzt das AudioTools-Plugin `mutagen`; die Bibliothek wird automatisch mitinstalliert.

1. **Dashboard starten**

   ```powershell
   python -m mmst.core.app
   ```

   Nach dem Start erscheint das FileManager-Plugin in der Seitenleiste. Plugins lassen sich starten/stoppen; im aktiven Zustand
   zeigt der zentrale Bereich das UI des ausgewählten Plugins.

## Tests & Qualitätssicherung

- Das Projekt verwendet `pytest`. Die Konfiguration (inkl. `pythonpath`) liegt in `pyproject.toml`.
- Test-Suite ausführen:

  ```powershell
  python -m pytest
  ```

  Der Plugin-Manager-Test wird automatisch übersprungen, falls PySide6 nicht installiert ist.

## Ausblick

- AudioTools-Plugin ausbauen: Equalizer-DSP, Recording-Pipeline und Plattform-spezifische Backends.
  - Nächste Schritte: EQ-DSP Pipeline, Echtzeit-Pegelanzeige, Linux-spezifische Loopback-Backends.
- MediaLibrary- und SystemTools-Plugins vorbereiten.
- Plugin-Konfigurationsdialoge implementieren (z. B. Hash-Algorithmus im Duplikat-Scanner).
- Ereignisbus erweitern (z. B. Toast-Benachrichtigungen im UI darstellen).
